# How to Run 
# If deploying to multiple facilities, run this playbook multiple times, one for each facility
# ansible-playbook --extra-vars "user=$USER ioc_name=sioc-123-123 executable_path=/afs/slac.stanford.edu/u/cd/pnispero/mps/central_node_ioc/" ./initial_ioc_deploy.yml
# This is for dev, and doesn't include using 'cram' and deploying a component to a 
# deployment location ($APP or $PHYSICS_TOP or $TOOLS/script or $PYDYM etc.)
# Process in detail: https://confluence.slac.stanford.edu/display/LCLSControls/CD+-+Deployment+Stage

- name: Normal IOC Deployment
  hosts: all
  # All vars from ioc_deploy.yml are accessible

  tasks:
  # - name: Add component to $EPICS_IOC_TOP
    # Location would depend on the facility
  # - name: Add ioc(s) to $IOC

  # For local/remote deployment, the user is already sitting in the repo
  # - name: DEBUG - Print each key-value pair
  #   ansible.builtin.debug:
  #     msg: "Key: {{ item.key }}, Value: {{ item.value }}"
  #   with_dict: "{{ ioc_dict }}"

  - name: 'Update sym link {{ ioc_link_folder }}/<ioc>/iocSpecificRelease to point to {{ ioc_release_folder }}/{{ component_name }}/<tag>'
    ansible.builtin.file:
      src: '{{ ioc_release_folder }}/{{ component_name }}/{{ item.value }}'
      dest: '{{ ioc_link_folder }}/{{ item.key }}/iocSpecificRelease'
      state: link
    when: user_src_repo == None # If user didn't want to point to user-space repo
    with_dict: "{{ ioc_dict }}"
    loop_control:
      label: '{{ ioc_link_folder }}/{{ item.key }}/iocSpecificRelease -> {{ ioc_release_folder }}/{{ component_name }}/{{ item.value }}'

  - name: 'Override {{ ioc_link_folder }}/<ioc>/iocSpecificRelease to point to {{ user_src_repo }}'
    ansible.builtin.file:
      src: '{{ user_src_repo }}'
      dest: '{{ ioc_link_folder }}/{{ item.key }}/iocSpecificRelease'
      state: link
    when: user_src_repo != None # Assuming this is the DEV server
    with_dict: "{{ ioc_dict }}"
    loop_control:
      label: '{{ ioc_link_folder }}/{{ item.key }}/iocSpecificRelease -> {{ user_src_repo }}'
  
  # TODO:
  # - name: Push repo to facilities specified
  # 1) Logic in CLI, either its in the repo already, or user specifies a different repo/tag
  #   Then itll be cloned, and the current working dir will be set so ansible can use that to Push
  # 2) Ensure ssh keys are added to desired facilities - 
    # fetch local keys from - ansible.posix.authorized_key:
    # copy local key to remote - ansible.builtin.copy
  # 2) copy entire repo/tag from local to remote - ansible.builtin.copy